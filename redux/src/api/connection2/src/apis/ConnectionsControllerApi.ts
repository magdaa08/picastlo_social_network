// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    FriendshipDTO,
    FriendshipDTOFromJSON,
    FriendshipDTOToJSON,
    Group,
    GroupFromJSON,
    GroupToJSON,
    GroupDTO,
    GroupDTOFromJSON,
    GroupDTOToJSON,
    UserDTO,
    UserDTOFromJSON,
    UserDTOToJSON,
} from '../models';

export interface GetFriendsByUsernameRequest {
    username: string;
}

export interface GetGroupByIdRequest {
    id: number;
}

export interface GetGroupByNameRequest {
    name: string;
}

export interface GetGroupMembersRequest {
    groupName: string;
}

export interface GetGroupMembershipByUsernameRequest {
    username: string;
}


/**
 */
function getFriendsByUsernameRaw<T>(requestParameters: GetFriendsByUsernameRequest, requestConfig: runtime.TypedQueryConfig<T, Array<FriendshipDTO>> = {}): QueryConfig<T> {
    if (requestParameters.username === null || requestParameters.username === undefined) {
        throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling getFriendsByUsername.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/connections/friendships/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(FriendshipDTOFromJSON), text);
    }

    return config;
}

/**
*/
export function getFriendsByUsername<T>(requestParameters: GetFriendsByUsernameRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<FriendshipDTO>>): QueryConfig<T> {
    return getFriendsByUsernameRaw(requestParameters, requestConfig);
}

/**
 */
function getGroupByIdRaw<T>(requestParameters: GetGroupByIdRequest, requestConfig: runtime.TypedQueryConfig<T, Group> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupById.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/connections/groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GroupFromJSON(body), text);
    }

    return config;
}

/**
*/
export function getGroupById<T>(requestParameters: GetGroupByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, Group>): QueryConfig<T> {
    return getGroupByIdRaw(requestParameters, requestConfig);
}

/**
 */
function getGroupByNameRaw<T>(requestParameters: GetGroupByNameRequest, requestConfig: runtime.TypedQueryConfig<T, Group> = {}): QueryConfig<T> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
        throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getGroupByName.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/connections/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GroupFromJSON(body), text);
    }

    return config;
}

/**
*/
export function getGroupByName<T>(requestParameters: GetGroupByNameRequest, requestConfig?: runtime.TypedQueryConfig<T, Group>): QueryConfig<T> {
    return getGroupByNameRaw(requestParameters, requestConfig);
}

/**
 */
function getGroupMembersRaw<T>(requestParameters: GetGroupMembersRequest, requestConfig: runtime.TypedQueryConfig<T, Array<UserDTO>> = {}): QueryConfig<T> {
    if (requestParameters.groupName === null || requestParameters.groupName === undefined) {
        throw new runtime.RequiredError('groupName','Required parameter requestParameters.groupName was null or undefined when calling getGroupMembers.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/connections/groups/{groupName}/members`.replace(`{${"groupName"}}`, encodeURIComponent(String(requestParameters.groupName))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(UserDTOFromJSON), text);
    }

    return config;
}

/**
*/
export function getGroupMembers<T>(requestParameters: GetGroupMembersRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<UserDTO>>): QueryConfig<T> {
    return getGroupMembersRaw(requestParameters, requestConfig);
}

/**
 */
function getGroupMembershipByUsernameRaw<T>(requestParameters: GetGroupMembershipByUsernameRequest, requestConfig: runtime.TypedQueryConfig<T, Array<GroupDTO>> = {}): QueryConfig<T> {
    if (requestParameters.username === null || requestParameters.username === undefined) {
        throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling getGroupMembershipByUsername.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/connections/memberships/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(GroupDTOFromJSON), text);
    }

    return config;
}

/**
*/
export function getGroupMembershipByUsername<T>(requestParameters: GetGroupMembershipByUsernameRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<GroupDTO>>): QueryConfig<T> {
    return getGroupMembershipByUsernameRaw(requestParameters, requestConfig);
}

