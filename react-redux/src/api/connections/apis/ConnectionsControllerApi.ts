/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FriendshipDTO,
  Group,
  GroupDTO,
  UserDTO,
} from '../models/index';
import {
    FriendshipDTOFromJSON,
    FriendshipDTOToJSON,
    GroupFromJSON,
    GroupToJSON,
    GroupDTOFromJSON,
    GroupDTOToJSON,
    UserDTOFromJSON,
    UserDTOToJSON,
} from '../models/index';

export interface GetFriendsByUsernameRequest {
    username: string;
}

export interface GetGroupByIdRequest {
    id: number;
}

export interface GetGroupByNameRequest {
    name: string;
}

export interface GetGroupMembersRequest {
    groupName: string;
}

export interface GetGroupMembershipByUsernameRequest {
    username: string;
}

/**
 * 
 */
export class ConnectionsControllerApi extends runtime.BaseAPI {

    /**
     */
    async getFriendsByUsernameRaw(requestParameters: GetFriendsByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FriendshipDTO>>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling getFriendsByUsername().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connections/friendships/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FriendshipDTOFromJSON));
    }

    /**
     */
    async getFriendsByUsername(requestParameters: GetFriendsByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FriendshipDTO>> {
        const response = await this.getFriendsByUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGroupByIdRaw(requestParameters: GetGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getGroupById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connections/groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     */
    async getGroupById(requestParameters: GetGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.getGroupByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGroupByNameRaw(requestParameters: GetGroupByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getGroupByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connections/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     */
    async getGroupByName(requestParameters: GetGroupByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.getGroupByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGroupMembersRaw(requestParameters: GetGroupMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserDTO>>> {
        if (requestParameters['groupName'] == null) {
            throw new runtime.RequiredError(
                'groupName',
                'Required parameter "groupName" was null or undefined when calling getGroupMembers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connections/groups/{groupName}/members`.replace(`{${"groupName"}}`, encodeURIComponent(String(requestParameters['groupName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserDTOFromJSON));
    }

    /**
     */
    async getGroupMembers(requestParameters: GetGroupMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserDTO>> {
        const response = await this.getGroupMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGroupMembershipByUsernameRaw(requestParameters: GetGroupMembershipByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupDTO>>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling getGroupMembershipByUsername().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connections/memberships/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupDTOFromJSON));
    }

    /**
     */
    async getGroupMembershipByUsername(requestParameters: GetGroupMembershipByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupDTO>> {
        const response = await this.getGroupMembershipByUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
