/* tslint:disable */
/* eslint-disable */
/**
 * Tutorial Management API
 * This API exposes endpoints to manage tutorials.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: myemail@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Book,
} from '../models/index';
import {
    BookFromJSON,
    BookToJSON,
} from '../models/index';

export interface AddBookRequest {
    book: Book;
}

export interface GetAllBooksRequest {
    filter?: string;
}

export interface GetBookByIdRequest {
    id: number;
}

/**
 * 
 */
export class BooksApi extends runtime.BaseAPI {

    /**
     * Add a new book
     */
    async addBookRaw(requestParameters: AddBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['book'] == null) {
            throw new runtime.RequiredError(
                'book',
                'Required parameter "book" was null or undefined when calling addBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/books`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BookToJSON(requestParameters['book']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a new book
     */
    async addBook(requestParameters: AddBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addBookRaw(requestParameters, initOverrides);
    }

    /**
     * Get all books
     */
    async getAllBooksRaw(requestParameters: GetAllBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Book>>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/books`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookFromJSON));
    }

    /**
     * Get all books
     */
    async getAllBooks(requestParameters: GetAllBooksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Book>> {
        const response = await this.getAllBooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a book by its id
     */
    async getBookByIdRaw(requestParameters: GetBookByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Book>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getBookById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/books/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookFromJSON(jsonValue));
    }

    /**
     * Get a book by its id
     */
    async getBookById(requestParameters: GetBookByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Book> {
        const response = await this.getBookByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
