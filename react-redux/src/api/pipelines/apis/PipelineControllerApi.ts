/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Pipeline,
} from '../models/index';
import {
    PipelineFromJSON,
    PipelineToJSON,
} from '../models/index';

export interface CreatePipelineRequest {
    pipeline: Pipeline;
}

export interface DeletePipelineRequest {
    id: number;
}

export interface GetPipelineByIdRequest {
    id: number;
}

export interface GetPipelinesByUsernameRequest {
    username: string;
}

export interface UpdatePipelineRequest {
    id: number;
    pipeline: Pipeline;
}

/**
 * 
 */
export class PipelineControllerApi extends runtime.BaseAPI {

    /**
     */
    async createPipelineRaw(requestParameters: CreatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>> {
        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling createPipeline().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/pipelines`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PipelineToJSON(requestParameters['pipeline']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFromJSON(jsonValue));
    }

    /**
     */
    async createPipeline(requestParameters: CreatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline> {
        const response = await this.createPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePipelineRaw(requestParameters: DeletePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePipeline().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pipelines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deletePipeline(requestParameters: DeletePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePipelineRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getPipelineByIdRaw(requestParameters: GetPipelineByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPipelineById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pipelines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFromJSON(jsonValue));
    }

    /**
     */
    async getPipelineById(requestParameters: GetPipelineByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline> {
        const response = await this.getPipelineByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPipelinesByUsernameRaw(requestParameters: GetPipelinesByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Pipeline>>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling getPipelinesByUsername().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pipelines/owner/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PipelineFromJSON));
    }

    /**
     */
    async getPipelinesByUsername(requestParameters: GetPipelinesByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Pipeline>> {
        const response = await this.getPipelinesByUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePipelineRaw(requestParameters: UpdatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePipeline().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling updatePipeline().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/pipelines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PipelineToJSON(requestParameters['pipeline']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFromJSON(jsonValue));
    }

    /**
     */
    async updatePipeline(requestParameters: UpdatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline> {
        const response = await this.updatePipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
